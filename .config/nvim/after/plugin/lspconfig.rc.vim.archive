if !exists('g:lspconfig')
	finish
endif

lua << EOF
vim.lsp.set_log_level("debug")
EOF

lua << EOF
local nvim_lsp = require('lspconfig')
local protocol = require'vim.lsp.protocol'
-- local util = require 'lspconfig/util'

-- Use an on_attach function to only map the following keys 
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
	local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
	local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

	--Enable completion triggered by <c-x><c-o>
	buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

	-- Mappings.
	local opts = { noremap=true, silent=true }

	-- See `:help vim.lsp.*` for documentation on any of the below functions
	--buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
	--buf_set_keymap('i', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
	buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
	buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
	buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
	buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
	--buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
	buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
	buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
	-- buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
	buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
	buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
	buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)

	-- formatting (auto)
	--if client.resolved_capabilities.document_formatting then
	--	vim.api.nvim_command [[augroup Format]]
	--	vim.api.nvim_command [[autocmd! * <buffer>]]
	--	vim.api.nvim_command [[autocmd BufWritePre <buffer> lua vim.lsp.buf.formatting_seq_sync()]]
	--	vim.api.nvim_command [[augroup END]]
	--end
	end	

	local lsp_installer = require("nvim-lsp-installer")

	lsp_installer.setup{}
	
	nvim_lsp.rust_analyzer.setup({
		on_attach=on_attach,
		settings = {
			["rust-analyzer"] = {
				assist = {
					importGranularity = "module",
					importPrefix = "by_self",
				},
				cargo = {
					loadOutDirsFromCheck = true
				},
				procMacro = {
					enable = true
				},
			}
		}
	})

	local capabilities = vim.lsp.protocol.make_client_capabilities()
	capabilities.textDocument.completion.completionItem.snippetSupport = true

	nvim_lsp.emmet_ls.setup({
		-- on_attach = on_attach,
		capabilities = capabilities,
		filetypes = { "html", "vue", "blade", "css", "less", "postcss", "sass", "scss", "typescriptreact", "javascriptreact" },
	})

	nvim_lsp.html.setup({
		capabilities = capabilities,
		filetypes = { "html", "blade" }
	})

	nvim_lsp.volar.setup({
		capabilities = capabilities,
		filetypes = { "typescript", "javascript", "vue", "json" }
	})

	nvim_lsp.tailwindcss.setup({
		capabilities = capabilities,
		filetypes = { "blade", "html", "php", "css", "less", "postcss", "sass", "scss", "javascript", "javascriptreact", "typescript", "typescriptreact", "vue" }
	})

	nvim_lsp.intelephense.setup({
		capabilities = capabilities,
		filetypes = { "php", "phtml", "blade" }
	})

	nvim_lsp.gopls.setup{}

	nvim_lsp.bashls.setup{}

	nvim_lsp.vimls.setup{}

	nvim_lsp.clangd.setup{}

	nvim_lsp.tsserver.setup{}

	nvim_lsp.sumneko_lua.setup {
	  settings = {
		Lua = {
		  runtime = {
			-- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim)
			version = 'LuaJIT',
		  },
		  diagnostics = {
			-- Get the language server to recognize the `vim` global
			globals = {'vim'},
		  },
		  workspace = {
			-- Make the server aware of Neovim runtime files
			library = vim.api.nvim_get_runtime_file("", true),
		  },
		  -- Do not send telemetry data containing a randomized but unique identifier
		  telemetry = {
			enable = false,
		  },
		},
	  },
	}

EOF
